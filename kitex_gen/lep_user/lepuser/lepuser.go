// Code generated by Kitex v1.16.4. DO NOT EDIT.

package lepuser

import (
	lep_user "bupt/lep_user/kitex_gen/lep_user"
	client "code.byted.org/kite/kitex/client"
	"context"
	"errors"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PermissionList": kitex.NewMethodInfo(
		permissionListHandler,
		newLepUserPermissionListArgs,
		newLepUserPermissionListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpsertPermission": kitex.NewMethodInfo(
		upsertPermissionHandler,
		newLepUserUpsertPermissionArgs,
		newLepUserUpsertPermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RoleList": kitex.NewMethodInfo(
		roleListHandler,
		newLepUserRoleListArgs,
		newLepUserRoleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpsertRole": kitex.NewMethodInfo(
		upsertRoleHandler,
		newLepUserUpsertRoleArgs,
		newLepUserUpsertRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UserList": kitex.NewMethodInfo(
		userListHandler,
		newLepUserUserListArgs,
		newLepUserUserListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpsertUser": kitex.NewMethodInfo(
		upsertUserHandler,
		newLepUserUpsertUserArgs,
		newLepUserUpsertUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MaterialList": kitex.NewMethodInfo(
		materialListHandler,
		newLepUserMaterialListArgs,
		newLepUserMaterialListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpsertMaterial": kitex.NewMethodInfo(
		upsertMaterialHandler,
		newLepUserUpsertMaterialArgs,
		newLepUserUpsertMaterialResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	lepUserServiceInfo                = NewServiceInfo()
	lepUserServiceInfoForClient       = NewServiceInfoForClient()
	lepUserServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return lepUserServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return lepUserServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return lepUserServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LepUser"
	handlerType := (*lep_user.LepUser)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "lep_user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v1.16.4",
		Extra:           extra,
	}
	return svcInfo
}

func permissionListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserPermissionListArgs)
	realResult := result.(*lep_user.LepUserPermissionListResult)
	success, err := handler.(lep_user.LepUser).PermissionList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserPermissionListArgs() interface{} {
	return lep_user.NewLepUserPermissionListArgs()
}

func newLepUserPermissionListResult() interface{} {
	return lep_user.NewLepUserPermissionListResult()
}

func upsertPermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserUpsertPermissionArgs)
	realResult := result.(*lep_user.LepUserUpsertPermissionResult)
	success, err := handler.(lep_user.LepUser).UpsertPermission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserUpsertPermissionArgs() interface{} {
	return lep_user.NewLepUserUpsertPermissionArgs()
}

func newLepUserUpsertPermissionResult() interface{} {
	return lep_user.NewLepUserUpsertPermissionResult()
}

func roleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserRoleListArgs)
	realResult := result.(*lep_user.LepUserRoleListResult)
	success, err := handler.(lep_user.LepUser).RoleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserRoleListArgs() interface{} {
	return lep_user.NewLepUserRoleListArgs()
}

func newLepUserRoleListResult() interface{} {
	return lep_user.NewLepUserRoleListResult()
}

func upsertRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserUpsertRoleArgs)
	realResult := result.(*lep_user.LepUserUpsertRoleResult)
	success, err := handler.(lep_user.LepUser).UpsertRole(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserUpsertRoleArgs() interface{} {
	return lep_user.NewLepUserUpsertRoleArgs()
}

func newLepUserUpsertRoleResult() interface{} {
	return lep_user.NewLepUserUpsertRoleResult()
}

func userListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserUserListArgs)
	realResult := result.(*lep_user.LepUserUserListResult)
	success, err := handler.(lep_user.LepUser).UserList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserUserListArgs() interface{} {
	return lep_user.NewLepUserUserListArgs()
}

func newLepUserUserListResult() interface{} {
	return lep_user.NewLepUserUserListResult()
}

func upsertUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserUpsertUserArgs)
	realResult := result.(*lep_user.LepUserUpsertUserResult)
	success, err := handler.(lep_user.LepUser).UpsertUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserUpsertUserArgs() interface{} {
	return lep_user.NewLepUserUpsertUserArgs()
}

func newLepUserUpsertUserResult() interface{} {
	return lep_user.NewLepUserUpsertUserResult()
}

func materialListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserMaterialListArgs)
	realResult := result.(*lep_user.LepUserMaterialListResult)
	success, err := handler.(lep_user.LepUser).MaterialList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserMaterialListArgs() interface{} {
	return lep_user.NewLepUserMaterialListArgs()
}

func newLepUserMaterialListResult() interface{} {
	return lep_user.NewLepUserMaterialListResult()
}

func upsertMaterialHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_user.LepUserUpsertMaterialArgs)
	realResult := result.(*lep_user.LepUserUpsertMaterialResult)
	success, err := handler.(lep_user.LepUser).UpsertMaterial(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepUserUpsertMaterialArgs() interface{} {
	return lep_user.NewLepUserUpsertMaterialArgs()
}

func newLepUserUpsertMaterialResult() interface{} {
	return lep_user.NewLepUserUpsertMaterialResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PermissionList(ctx context.Context, req *lep_user.PermissionListRequest) (r *lep_user.PermissionListResp, err error) {
	var _args lep_user.LepUserPermissionListArgs
	_args.Req = req
	var _result lep_user.LepUserPermissionListResult
	if err = p.c.Call(ctx, "PermissionList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpsertPermission(ctx context.Context, req *lep_user.UpsertMaterialRequest) (r *lep_user.UpsertPermissionResp, err error) {
	var _args lep_user.LepUserUpsertPermissionArgs
	_args.Req = req
	var _result lep_user.LepUserUpsertPermissionResult
	if err = p.c.Call(ctx, "UpsertPermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RoleList(ctx context.Context, req *lep_user.RoleListRequest) (r *lep_user.RoleListResp, err error) {
	var _args lep_user.LepUserRoleListArgs
	_args.Req = req
	var _result lep_user.LepUserRoleListResult
	if err = p.c.Call(ctx, "RoleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpsertRole(ctx context.Context, req *lep_user.UpsertRoleRequest) (r *lep_user.UpsertRoleResp, err error) {
	var _args lep_user.LepUserUpsertRoleArgs
	_args.Req = req
	var _result lep_user.LepUserUpsertRoleResult
	if err = p.c.Call(ctx, "UpsertRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserList(ctx context.Context, req *lep_user.UserListRequest) (r *lep_user.UserListResp, err error) {
	var _args lep_user.LepUserUserListArgs
	_args.Req = req
	var _result lep_user.LepUserUserListResult
	if err = p.c.Call(ctx, "UserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpsertUser(ctx context.Context, req *lep_user.UpsertUserRequest) (r *lep_user.UpsertUserResp, err error) {
	var _args lep_user.LepUserUpsertUserArgs
	_args.Req = req
	var _result lep_user.LepUserUpsertUserResult
	if err = p.c.Call(ctx, "UpsertUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MaterialList(ctx context.Context, req *lep_user.MaterialListRequest) (r *lep_user.MaterialListResp, err error) {
	var _args lep_user.LepUserMaterialListArgs
	_args.Req = req
	var _result lep_user.LepUserMaterialListResult
	if err = p.c.Call(ctx, "MaterialList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpsertMaterial(ctx context.Context, req *lep_user.UpsertMaterialRequest) (r *lep_user.UpsertMaterialResp, err error) {
	var _args lep_user.LepUserUpsertMaterialArgs
	_args.Req = req
	var _result lep_user.LepUserUpsertMaterialResult
	if err = p.c.Call(ctx, "UpsertMaterial", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
